// Generated by CoffeeScript 2.7.0
(function() {
  var AjaxLighterBox, Backdrop, ImageLighterBox, ImageModalResizer, LightboxGroup, LighterBox, Spinner,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Backdrop = class Backdrop {
    constructor() {
      this.remove = this.remove.bind(this);
      this.isNestedBackdrop = $(".lighter-box-backdrop").length > 0;
      this.backdrop = $("<div class='lighter-box-backdrop' />").appendTo("body");
      if (!this.isNestedBackdrop) {
        $("body").addClass("lighter-box-has-backdrop");
        $("body > *").wrapAll("<div class='lighter-box-aria-hide-body' aria-hidden='true' />");
      }
    }

    remove() {
      this.backdrop.remove();
      if (!this.isNestedBackdrop) {
        $(".lighter-box-aria-hide-body > *").unwrap();
        return $("body").removeClass("lighter-box-has-backdrop");
      }
    }

  };

  Spinner = class Spinner {
    constructor(parentEl) {
      this.showDelayed = this.showDelayed.bind(this);
      this.show = this.show.bind(this);
      this.remove = this.remove.bind(this);
      this._clearDelay = this._clearDelay.bind(this);
      this.parentEl = parentEl;
      this.el = $("<div class='lighter-box-spinner' tabindex='0'><div class='lighter-box-sr-only'>wird geladen …</div><div class='rect1' /><div class='rect2' /><div class='rect3' /><div class='rect4' /><div class='rect5' /></div>").hide().appendTo(this.parentEl);
      this.delay = null;
    }

    showDelayed(delayMS) {
      this._clearDelay();
      return this.delay = window.setTimeout(this.show, delayMS);
    }

    show() {
      this._clearDelay();
      return this.el.show().focus();
    }

    remove() {
      this._clearDelay();
      this.el.remove();
      return this.parentEl.focus();
    }

    _clearDelay() {
      return window.clearTimeout(this.delay);
    }

  };

  LightboxGroup = class LightboxGroup {
    constructor(currentEl) {
      this.index = this.index.bind(this);
      this.hasNext = this.hasNext.bind(this);
      this.hasPrev = this.hasPrev.bind(this);
      this.nextHref = this.nextHref.bind(this);
      this.prevHref = this.prevHref.bind(this);
      this.next = this.next.bind(this);
      this.prev = this.prev.bind(this);
      this._elems = this._elems.bind(this);
      this.currentEl = currentEl;
    }

    index() {
      return this._elems().index(this.currentEl);
    }

    hasNext() {
      return this.index() + 1 < this._elems().length;
    }

    hasPrev() {
      return this.index() - 1 >= 0;
    }

    nextHref() {
      return this._elems().eq(this.index() + 1).attr("href");
    }

    prevHref() {
      return this._elems().eq(this.index() - 1).attr("href");
    }

    next() {
      return this.currentEl = this._elems().eq(this.index() + 1);
    }

    prev() {
      return this.currentEl = this._elems().eq(this.index() - 1);
    }

    _elems() {
      var groupName;
      if ((groupName = this.currentEl.attr("data-lightbox-group"))) {
        return $(`[data-lightbox-group='${groupName}']:visible`);
      } else {
        return this.currentEl;
      }
    }

  };

  ImageModalResizer = (function() {
    class ImageModalResizer {
      constructor(modal1) {
        this.run = this.run.bind(this);
        this._run = this._run.bind(this);
        this._resize = this._resize.bind(this);
        this.modal = modal1;
        this.figure = this.modal.find("figure");
        this.img = this.figure.find("img");
        this.figcaption = this.figure.find("figcaption");
        this.minImgHeight = parseInt(this.img.css("min-height"), 10);
        this.running = false;
      }

      run() {
        if (this.running) {
          return;
        }
        this.running = true;
        return window.requestAnimationFrame(this._run);
      }

      _run() {
        this.img.css({
          "max-height": "none"
        });
        this.modalHeight = this.modal.height();
        this._resize();
        return this.running = false;
      }

      _resize() {
        var captionWidth, newHeight, overflow;
        if ((overflow = this.figure.height() - this.modalHeight) > 0) {
          if ((newHeight = this.img.height() - overflow) >= this.minImgHeight) {
            this.img.css({
              "max-height": `${newHeight}px`
            });
          } else {
            this.img.css({
              "max-height": `${this.minImgHeight}px`
            });
            return;
          }
        }
        captionWidth = Math.max(this.img.width(), this.MIN_CAPTION_WIDTH);
        this.figcaption.css({
          "max-width": captionWidth
        });
        if (this.figure.height() > this.modalHeight) {
          return this._resize();
        }
      }

    };

    ImageModalResizer.prototype.MIN_CAPTION_WIDTH = 200;

    return ImageModalResizer;

  }).call(this);

  LighterBox = class LighterBox {
    constructor(srcEl) {
      this.hide = this.hide.bind(this);
      this._createContainer = this._createContainer.bind(this);
      this._createModal = this._createModal.bind(this);
      this._createInnerModal = this._createInnerModal.bind(this);
      // Template method, override in subclasses if needed
      this._setContent = this._setContent.bind(this);
      this._loadContent = this._loadContent.bind(this);
      this._trapFocus = this._trapFocus.bind(this);
      this._releaseFocus = this._releaseFocus.bind(this);
      this._onKeydown = this._onKeydown.bind(this);
      this._showNext = this._showNext.bind(this);
      this._showPrev = this._showPrev.bind(this);
      this._isForemost = this._isForemost.bind(this);
      this.eventNamespace = `lighter-box-${new Date().getTime()}`;
      this.srcEl = $(srcEl);
      this.originalFocusEl = $(":focus");
      this.lightboxGroup = new LightboxGroup(this.srcEl);
      this.backdrop = new Backdrop();
      this.container = this._createContainer();
      this.modal = this._createModal(this.container);
      this.modal.addClass(this.srcEl.data("lightbox-class")).data("lighter-box", this);
      this._createInnerModal();
      this.container.on(`click.${this.eventNamespace}`, (ev) => {
        if (ev.target === this.container[0]) {
          return this.hide();
        }
      });
      this.container.on(`click.${this.eventNamespace}`, "[data-lighter-box-dismiss]", this.hide);
      this.container.on(`click.${this.eventNamespace}`, "[data-lighter-box-prev]", (ev) => {
        ev.preventDefault();
        return this._showPrev();
      });
      this.container.on(`click.${this.eventNamespace}`, "[data-lighter-box-next]", (ev) => {
        ev.preventDefault();
        return this._showNext();
      });
      this.container.on(`keydown.${this.eventNamespace}`, this._onKeydown);
      this._trapFocus();
      this.modal.focus();
      this._setContent();
    }

    hide() {
      this._releaseFocus();
      this.container.off(`.${this.eventNamespace}`);
      $(window).off(`.${this.eventNamespace}`);
      this.modal.trigger("lighter-box-will-hide", [this]);
      this.container.remove();
      this.backdrop.remove();
      return this.originalFocusEl.focus();
    }

    _createContainer() {
      return $("<div class='lighter-box-container' />").appendTo("body");
    }

    _createModal(container) {
      var modal;
      modal = $("<div class='lighter-box-modal' role='dialog' aria-hidden='false' tabindex='0'/>").appendTo(container);
      $("<button class='lighter-box-close-button' title='Vergrößerte Ansicht schließen' data-lighter-box-dismiss><span aria-hidden='true'>×</span></button>").appendTo(container);
      $("<a data-lighter-box-prev class='lighter-box-prev-link' href='#' title='Voriges Bild'><span aria-hidden='true'>‹</span></a>").appendTo(container);
      $("<a data-lighter-box-next class='lighter-box-next-link' href='#' title='Nächstes Bild'><span aria-hidden='true'>›</span></a>").appendTo(container);
      return modal;
    }

    _createInnerModal() {}

    _setContent() {
      var nextLink, prevLink, spinner;
      prevLink = this.container.find("[data-lighter-box-prev]").hide();
      nextLink = this.container.find("[data-lighter-box-next]").hide();
      spinner = new Spinner(this.modal);
      spinner.showDelayed(100);
      return this._loadContent().then(() => {
        spinner.remove();
        if (this.lightboxGroup.hasPrev()) {
          prevLink.attr("href", this.lightboxGroup.prevHref()).show();
        }
        if (this.lightboxGroup.hasNext()) {
          nextLink.attr("href", this.lightboxGroup.nextHref()).show();
        }
        return this.modal.trigger("lighter-box-content-loaded", [this]);
      });
    }

    _loadContent() {
      throw "_loadContent needs to be overriden in a subclass.";
    }

    _trapFocus() {
      return $(document).on(`focusin.${this.eventNamespace}`, (ev) => {
        if (!this._isForemost()) {
          return;
        }
        if (!$.contains(this.container[0], ev.target)) {
          return this.modal.focus();
        }
      });
    }

    _releaseFocus() {
      return $(document).off(`focusin.${this.eventNamespace}`);
    }

    _onKeydown(ev) {
      if (!this._isForemost()) {
        return;
      }
      switch (ev.which) {
        case 27:
          ev.preventDefault();
          return this.hide();
        case 39:
          ev.preventDefault();
          return this._showNext();
        case 37:
          ev.preventDefault();
          return this._showPrev();
      }
    }

    _showNext() {
      if (this.lightboxGroup.hasNext()) {
        this.srcEl = this.lightboxGroup.next();
        this._setContent();
        return this.modal.focus();
      }
    }

    _showPrev() {
      if (this.lightboxGroup.hasPrev()) {
        this.srcEl = this.lightboxGroup.prev();
        this._setContent();
        return this.modal.focus();
      }
    }

    _isForemost() {
      return this.container.nextAll(".lighter-box-container").length === 0;
    }

  };

  ImageLighterBox = class ImageLighterBox extends LighterBox {
    constructor(srcEl) {
      super(srcEl);
      this._createInnerModal = this._createInnerModal.bind(this);
      this._loadContent = this._loadContent.bind(this);
      this._setCaption = this._setCaption.bind(this);
      this.resizer = new ImageModalResizer(this.modal);
      $(window).on(`resize.${this.eventNamespace}`, () => {
        return this.resizer.run();
      });
    }

    _createInnerModal() {
      var figure;
      boundMethodCheck(this, ImageLighterBox);
      figure = $("<figure />").appendTo(this.modal);
      $("<figcaption id='lighter-box-figcaption' class='lighter-box-figcaption'/>").appendTo(figure);
      return $("<img class='lighter-box-image'>").attr({
        "aria-labelledby": "lighter-box-figcaption"
      }).prependTo(figure);
    }

    _loadContent() {
      boundMethodCheck(this, ImageLighterBox);
      return $.Deferred((deferred) => {
        var caption, href, newImg;
        href = this.srcEl.data("lightbox-href") || this.srcEl.attr("href");
        caption = this.srcEl.data("lightbox-caption") || this.srcEl.find("img").attr("alt") || "";
        return newImg = $("<img>").attr({
          src: href
        }).one("load", () => {
          this.modal.find("img").attr({
            src: newImg.attr("src")
          });
          this._setCaption(caption);
          this.resizer.run();
          return deferred.resolve();
        });
      });
    }

    _setCaption(caption) {
      var figcaptionEl;
      boundMethodCheck(this, ImageLighterBox);
      figcaptionEl = this.modal.find("figcaption");
      if (this.srcEl.data("lightbox-caption-allow-html")) {
        figcaptionEl.html(caption);
      } else {
        figcaptionEl.text(caption);
      }
      return figcaptionEl.toggleClass("empty-caption", caption.trim() === "");
    }

  };

  AjaxLighterBox = class AjaxLighterBox extends LighterBox {
    constructor(srcEl) {
      super(srcEl);
      this._createInnerModal = this._createInnerModal.bind(this);
      this._loadContent = this._loadContent.bind(this);
    }

    _createInnerModal() {
      boundMethodCheck(this, AjaxLighterBox);
      return this.ajaxContainer = $("<div/>").appendTo(this.modal);
    }

    _loadContent() {
      var fragment, href;
      boundMethodCheck(this, AjaxLighterBox);
      href = this.srcEl.data("lightbox-href") || this.srcEl.attr("href");
      fragment = this.srcEl.data("lightbox-fragment");
      return $.get(href, (data) => {
        data = $("<div/>").append($.parseHTML(data)).find(fragment);
        return this.ajaxContainer.html(data);
      });
    }

  };

  window.LighterBox = {
    Ajax: AjaxLighterBox,
    Image: ImageLighterBox
  };

}).call(this);
